# ########################################################
# ## pytest runs on docker-build-and-push image ##########
# ########################################################
# # reseni chyb testu:
# KeyError: 'time' # time je nazev sloupce
#     Tento problém nastává, protože v některých řádcích tabulky 
#     nemusí být sloupec time. V testu test_get_stock_data 
#     je třeba tuto situaci správně zpracovat.

# OperationalError: could not translate host name "db" to address: Name or service not known

#     Tento problém je způsoben tím, že testovací Docker container 
#     nemá přístup k databázi, protože hostname db 
#     není správně nastavený nebo není dostupný. 
#     Během testování by měla být použita lokální SQLite 
#     databáze, kterou lze snadno nastavit a použít.

# reseni updatu tree v readme... nutno udelat pro kazde readme
# pred tim vsak doladit
# ########################################################

name: CI/CD Pipeline

on:
  pull_request:
    branches:
      - main
      - 'feature/**'
      - 'bug/**'
      - 'chore/**'
  workflow_dispatch:

  workflow_call:
    secrets:
      AWS_ACCESS_KEY_TECHNICAL_USER:
        required: true
      AWS_SECRET_ACCESS_TECHNICAL_USER:
        required: true

jobs:
  setup:
    name: AWS Setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_TECHNICAL_USER }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_TECHNICAL_USER }}
          aws-region: us-east-1

  trivy-scan:
    name: Trivy Scan
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: 'public.ecr.aws/d8o8x6c7/stock_scraper_backend:latest'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

  ruff-scan:
    name: Run Ruff
    runs-on: ubuntu-latest
    needs: trivy-scan
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Ruff
        uses: chartboost/ruff-action@v1
        with:
          args: check ./ --fix

  # TODO: revision of db, models, migrate,
  # scraper on docker-compose, redis - need create,
  # 
  # NOT important for the DevOps course
  # will manage it after done graduation tasks
  # test-and-coverage:
  #   name: Run Tests and Check Coverage
  #   runs-on: ubuntu-latest
  #   needs: ruff-scan
  #   env:
  #     TESTING: true
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Log in to Amazon ECR Public
  #       env:
  #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_TECHNICAL_USER }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_TECHNICAL_USER }}
  #       run: |
  #         aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws

  #     - name: Pull Docker image
  #       run: |
  #         docker pull public.ecr.aws/d8o8x6c7/stock_scraper_backend:latest

  #     - name: Run tests and check coverage
  #       env:
  #         TEST_DATABASE_URL: 'sqlite:///./app/tests/test_db/test.db'
  #       run: |
  #         docker run --rm \
  #           -e TESTING=true \
  #           -e TEST_DATABASE_URL=$TEST_DATABASE_URL \
  #           public.ecr.aws/d8o8x6c7/stock_scraper_backend:latest bash -c "poetry run coverage run -m pytest && poetry run coverage report && poetry run coverage html && poetry run coverage-badge -o coverage.svg -f"
      
  #     - name: Upload coverage badge
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: coverage-badge
  #         path: coverage.svg

  #     - name: Upload HTML coverage report
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: html-coverage-report
  #         path: htmlcov

  # TODO: make it for all README.md
  # make github token and place him on the github secrets
  # update-readme:
  #   runs-on: ubuntu-latest
  #   needs: ruff-scan
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Set up Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.10'

  #     - name: Install tree
  #       run: sudo apt-get install -y tree

  #     - name: Set executable permissions for update_readme_tree.sh
  #       run: chmod +x ./update_readme_tree.sh

  #     - name: Update README.md with directory tree
  #       run: ./update_readme_tree.sh

  #     - name: Get current branch name
  #       id: vars
  #       run: echo "actual_branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV

  #     - name: Set git user info
  #       run: |
  #         git config --local user.email "${{ secrets.GIT_USER_EMAIL || 'actions@github.com' }}"
  #         git config --local user.name "${{ secrets.GIT_USER_NAME || 'GitHub Actions' }}"

  #     - name: Commit changes
  #       run: |
  #         git add README.md
  #         git commit -m "Update project README.md with latest directory tree"
  #         git push --force origin HEAD:${{ env.actual_branch }}
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Display README.md contents
  #       run: cat README.md

  docker-build-and-push:
    name: Docker Build and Push to AWS ECR Public
    runs-on: ubuntu-latest
    needs: ["setup", "trivy-scan", "ruff-scan"]
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Amazon ECR Public
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_TECHNICAL_USER }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_TECHNICAL_USER }}
        run: |
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws

      - name: Build, tag, and push Docker image to Amazon ECR Public
        env:
          ECR_REPOSITORY: "public.ecr.aws/d8o8x6c7/stock_scraper_backend"
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REPOSITORY:$IMAGE_TAG

  release:
    name: Release Workflow
    runs-on: ubuntu-latest
    needs: docker-build-and-push
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/'))
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.16

      - name: Install dependencies
        run: go mod tidy

      - name: Install GoReleaser
        run: |
          curl -sL https://git.io/goreleaser | bash
          goreleaser --version

      - name: Release build
        run: |
          GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} goreleaser release

      - name: Docker login
        run: echo ${{ secrets.REGISTRY_TOKEN }} | docker login ghcr.io -u ${{ secrets.REGISTRY_USER }} --password-stdin

      - name: Build Docker image
        run: |
          docker build -t ghcr.io/Necraatall/stock_scraper_backend:${{ github.ref }} .  
      
      - name: Push Docker image
        run: |
          docker push ghcr.io/Necraatall/stock_scraper_backend:${{ github.ref }}

      - name: Scan Docker image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ghcr.io/Necraatall/stock_scraper_backend:${{ github.ref }}'
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'