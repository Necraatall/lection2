# name: CI/CD Pipeline

# on:
#   pull_request:
#     branches:
#       - main
#       - 'feature/**'
#       - 'bug/**'
#       - 'chore/**'
#   workflow_call:
#     secrets:
#       AWS_ACCESS_KEY_TECHNICAL_USER:
#         required: true
#       AWS_SECRET_ACCESS_TECHNICAL_USER:
#         required: true

# jobs:
#   setup:
#     name: AWS Setup
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v2
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_TECHNICAL_USER }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_TECHNICAL_USER }}
#           aws-region: us-east-1

#   docker-build-and-push:
#     name: Docker Build and Push to AWS ECR Public
#     runs-on: ubuntu-latest
#     needs: setup
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Log in to Amazon ECR Public
#         env:
#           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_TECHNICAL_USER }}
#           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_TECHNICAL_USER }}
#         run: |
#           aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws

#       - name: Build, tag, and push Docker image to Amazon ECR Public
#         env:
#           ECR_REPOSITORY: "public.ecr.aws/d8o8x6c7/stock_scraper_backend"
#           IMAGE_TAG: latest
#         run: |
#           docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
#           docker push $ECR_REPOSITORY:$IMAGE_TAG

#   trivy-scan:
#     name: Trivy Scan
#     runs-on: ubuntu-latest
#     needs: docker-build-and-push
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Run Trivy vulnerability scanner
#         uses: aquasecurity/trivy-action@0.20.0
#         with:
#           image-ref: 'public.ecr.aws/d8o8x6c7/stock_scraper_backend:latest'
#           format: 'table'
#           exit-code: '1'
#           ignore-unfixed: true
#           vuln-type: 'os,library'
#           severity: 'CRITICAL,HIGH'

#   ruff-scan:
#     name: Run Ruff
#     runs-on: ubuntu-latest
#     needs: trivy-scan
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Run Ruff
#         uses: chartboost/ruff-action@v1
#         with:
#           args: check ./ --fix

#   tests:
#     name: Run Pytest with Coverage
#     runs-on: ubuntu-latest
#     needs: ruff-scan
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4
      
#       - name: Set up Python
#         uses: actions/setup-python@v5
#         with:
#           python-version: "3.12"

#       - name: Install dependencies
#         run: |
#           python -m pip install --upgrade pip
#           pip install -r requirements.txt
#           pip install coverage coverage-badge

#       - name: Run tests
#         run: |
#           coverage run -m pytest
#           coverage report
#           coverage html

#       - name: Generate coverage badge
#         run: coverage-badge -o coverage.svg -f

#       - name: Upload coverage badge
#         uses: actions/upload-artifact@v4
#         with:
#           name: coverage-badge
#           path: coverage.svg

#   pytest-coverage:
#     name: Combine & check coverage
#     if: always()
#     needs: tests
#     runs-on: ubuntu-latest

#     steps:
#       - uses: actions/checkout@v4
#       - uses: actions/setup-python@v5
#         with:
#           # Use latest Python, so it understands all syntax.
#           python-version: "3.12"

#       - uses: actions/download-artifact@v4
#         with:
#           pattern: coverage-data-*
#           merge-multiple: true

#       - name: Combine coverage & fail if it's <100%
#         run: |
#           python -Im pip install --upgrade coverage[toml]|

#           python -Im coverage combine
#           python -Im coverage html --skip-covered --skip-empty

#           # Report and write to summary.
#           python -Im coverage report --format=markdown >> $GITHUB_STEP_SUMMARY

#           # Report again and fail if under 100%.
#           python -Im coverage report --fail-under=100

#       - name: Upload HTML report if check failed
#         uses: actions/upload-artifact@v4
#         with:
#           name: html-report
#           path: htmlcov
#         if: ${{ always() }}

#   update-readme:
#     runs-on: ubuntu-latest
#     needs: pytest-coverage
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Set up Python
#         uses: actions/setup-python@v5
#         with:
#           python-version: '3.10'

#       - name: Install tree
#         run: sudo apt-get install -y tree

#       - name: Update README.md with directory tree
#         run: ./update_readme_tree.sh

#       - name: Commit changes
#         run: |
#           git config --local user.email "actions@github.com"
#           git config --local user.name "GitHub Actions"
#           git add README.md
#           git commit -m "Update README.md with latest directory tree"
#           git push --force
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#   release:
#     name: Release Workflow
#     runs-on: ubuntu-latest
#     if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Set up Go 1.x
#         uses: actions/setup-go@v2
#         with:
#           go-version: ^1.16

#       - name: Install dependencies
#         run: go mod tidy

#       - name: Install GoReleaser
#         run: |
#           curl -sL https://git.io/goreleaser | bash
#           goreleaser --version

#       - name: Release build
#         run: |
#           GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} goreleaser release

#       - name: Docker login
#         run: echo ${{ secrets.REGISTRY_TOKEN }} | docker login ghcr.io -u ${{ secrets.REGISTRY_USER }} --password-stdin

#       - name: Build Docker image
#         run: |
#           docker build -t ghcr.io/Necraatall/stock_scraper_backend:${{ github.ref }} .  
      
#       - name: Push Docker image
#         run: |
#           docker push ghcr.io/Necraatall/stock_scraper_backend:${{ github.ref }}

#       - name: Scan Docker image for vulnerabilities
#         uses: aquasecurity/trivy-action@master
#         with:
#           image-ref: 'ghcr.io/Necraatall/stock_scraper_backend:${{ github.ref }}'
#           format: 'template'
#           template: '@/contrib/sarif.tpl'
#           output: 'trivy-results.sarif'
#           severity: 'CRITICAL,HIGH'

#       - name: Upload Trivy scan results to GitHub Security tab
#         uses: github/codeql-action/upload-sarif@v2
#         with:
#           sarif_file: 'trivy-results.sarif'




# name: CI/CD Pipeline

# on:
#   pull_request:
#     branches:
#       - main
#       - 'feature/**'
#       - 'bug/**'
#       - 'chore/**'
#   workflow_call:
#     secrets:
#       AWS_ACCESS_KEY_TECHNICAL_USER:
#         required: true
#       AWS_SECRET_ACCESS_TECHNICAL_USER:
#         required: true

# jobs:
#   aws-setup:
#     name: AWS Setup
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v2
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_TECHNICAL_USER }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_TECHNICAL_USER }}
#           aws-region: us-east-1

#   docker-build-and-push:
#     name: Docker Build and Push to AWS ECR Public
#     runs-on: ubuntu-latest
#     needs: aws-setup
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Log in to Amazon ECR Public
#         env:
#           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_TECHNICAL_USER }}
#           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_TECHNICAL_USER }}
#         run: |
#           aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws

#       - name: Build, tag, and push Docker image to Amazon ECR Public
#         env:
#           ECR_REPOSITORY: "public.ecr.aws/d8o8x6c7/stock_scraper_backend"
#           IMAGE_TAG: latest
#         run: |
#           docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
#           docker push $ECR_REPOSITORY:$IMAGE_TAG

#   trivy-scan:
#     name: Trivy Scan
#     runs-on: ubuntu-latest
#     needs: docker-build-and-push
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Run Trivy vulnerability scanner
#         uses: aquasecurity/trivy-action@0.20.0
#         with:
#           image-ref: 'public.ecr.aws/d8o8x6c7/stock_scraper_backend:latest'
#           format: 'table'
#           exit-code: '1'
#           ignore-unfixed: true
#           vuln-type: 'os,library'
#           severity: 'CRITICAL,HIGH'

#   ruff-lint:
#     name: Run Ruff Linter
#     runs-on: ubuntu-latest
#     needs: trivy-scan
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Run Ruff
#         uses: chartboost/ruff-action@v1
#         with:
#           args: check ./ --fix

#   test-and-coverage:
#     name: Run Tests and Check Coverage with HTML report
#     runs-on: ubuntu-latest
#     needs: ruff-lint
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4
      
#       - name: Set up Python
#         uses: actions/setup-python@v5
#         with:
#           python-version: "3.12"

#       - name: Install dependencies
#         run: |
#           poetry install

#       - name: Run tests and coverage
#         run: |
#           poetry run coverage run -m pytest
#           poetry run coverage report
#           poetry run coverage html

#       - name: Generate coverage badge
#         run: poetry run coverage-badge -o coverage.svg -f

#       - name: Upload coverage badge
#         uses: actions/upload-artifact@v4
#         with:
#           name: coverage-badge
#           path: coverage.svg

#       - name: Combine coverage & fail if it's <100%
#         run: |
#           poetry run coverage combine
#           poetry run coverage html --skip-covered --skip-empty

#           # Report and write to summary.
#           poetry run coverage report --format=markdown >> $GITHUB_STEP_SUMMARY

#           # Report again and fail if under 100%.
#           poetry run coverage report --fail-under=100

#       - name: Upload HTML report if check failed
#         if: failure()
#         uses: actions/upload-artifact@v4
#         with:
#           name: html-report
#           path: htmlcov

#   update-readme:
#     name: Update project README tree part
#     runs-on: ubuntu-latest
#     needs: test-and-coverage
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Set up Python
#         uses: actions/setup-python@v5
#         with:
#           python-version: '3.12'

#       - name: Install tree
#         run: sudo apt-get install -y tree

#       - name: Update README.md directory tree
#         run: ./update_readme_tree.sh

#       - name: Commit changes
#         run: |
#           git config --local user.email "actions@github.com"
#           git config --local user.name "GitHub Actions"
#           git add README.md
#           git commit -m "Update README.md with latest directory tree"
#           git push --force
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#   release:
#     name: Release Workflow
#     runs-on: ubuntu-latest
#     if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Set up Go 1.x
#         uses: actions/setup-go@v2
#         with:
#           go-version: ^1.16

#       - name: Install dependencies
#         run: go mod tidy

#       - name: Install GoReleaser
#         run: |
#           curl -sL https://git.io/goreleaser | bash
#           goreleaser --version

#       - name: Release build
#         run: |
#           GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} goreleaser release

#       - name: Docker login
#         run: echo ${{ secrets.REGISTRY_TOKEN }} | docker login ghcr.io -u ${{ secrets.REGISTRY_USER }} --password-stdin

#       - name: Build Docker image
#         run: |
#           docker build -t ghcr.io/Necraatall/stock_scraper_backend:${{ github.ref }} .  
      
#       - name: Push Docker image
#         run: |
#           docker push ghcr.io/Necraatall/stock_scraper_backend:${{ github.ref }}

#       - name: Scan Docker image for vulnerabilities
#         uses: aquasecurity/trivy-action@master
#         with:
#           image-ref: 'ghcr.io/Necraatall/stock_scraper_backend:${{ github.ref }}'
#           format: 'template'
#           template: '@/contrib/sarif.tpl'
#           output: 'trivy-results.sarif'
#           severity: 'CRITICAL,HIGH'

#       - name: Upload Trivy scan results to GitHub Security tab
#         uses: github/codeql-action/upload-sarif@v2
#         with:
#           sarif_file: 'trivy-results.sarif'





# ########################################################
# ## pytest runs on docker-build-and-push image ##########
# ########################################################
# # chyba pri load docker image: 
# # Run gzip -d stock_scraper_backend_latest.tar.gz
# #   gzip -d stock_scraper_backend_latest.tar.gz
# #   docker load -i stock_scraper_backend_latest.tar
# #   shell: /usr/bin/bash -e {0}
# # gzip: stock_scraper_backend_latest.tar.gz is a directory -- ignored
# # Error: Process completed with exit code 2.
# ########################################################
# name: CI/CD Pipeline

# on:
#   pull_request:
#     branches:
#       - main
#       - 'feature/**'
#       - 'bug/**'
#       - 'chore/**'
#   workflow_call:
#     secrets:
#       AWS_ACCESS_KEY_TECHNICAL_USER:
#         required: true
#       AWS_SECRET_ACCESS_TECHNICAL_USER:
#         required: true

# jobs:
#   aws-setup:
#     name: AWS Setup
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v2
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_TECHNICAL_USER }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_TECHNICAL_USER }}
#           aws-region: us-east-1

#   docker-build-and-push:
#     name: Docker Build and Push to AWS ECR Public
#     runs-on: ubuntu-latest
#     needs: aws-setup
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Log in to Amazon ECR Public
#         env:
#           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_TECHNICAL_USER }}
#           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_TECHNICAL_USER }}
#         run: |
#           aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws

#       - name: Build Docker image
#         run: docker build -t stock_scraper_backend:latest .

#       - name: Tag Docker image
#         run: docker tag stock_scraper_backend:latest public.ecr.aws/d8o8x6c7/stock_scraper_backend:latest

#       - name: Push Docker image to ECR Public
#         run: docker push public.ecr.aws/d8o8x6c7/stock_scraper_backend:latest

#       - name: Save Docker image to file
#         run: docker save stock_scraper_backend:latest | gzip > stock_scraper_backend_latest.tar.gz

#       - name: Upload Docker image as artifact
#         uses: actions/upload-artifact@v4
#         with:
#           name: docker-image
#           path: stock_scraper_backend_latest.tar.gz

#   trivy-scan:
#     name: Trivy Scan
#     runs-on: ubuntu-latest
#     needs: docker-build-and-push
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Run Trivy vulnerability scanner
#         uses: aquasecurity/trivy-action@0.20.0
#         with:
#           image-ref: 'public.ecr.aws/d8o8x6c7/stock_scraper_backend:latest'
#           format: 'table'
#           exit-code: '1'
#           ignore-unfixed: true
#           vuln-type: 'os,library'
#           severity: 'CRITICAL,HIGH'

#   ruff-lint:
#     name: Run Ruff Linter
#     runs-on: ubuntu-latest
#     needs: trivy-scan
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Run Ruff
#         uses: chartboost/ruff-action@v1
#         with:
#           args: check ./ --fix

#   test-and-coverage:
#     name: Run Tests and Check Coverage
#     runs-on: ubuntu-latest
#     needs: ruff-lint
#     steps:
#       - name: Download Docker image artifact
#         uses: actions/download-artifact@v4
#         with:
#           name: docker-image
#           path: stock_scraper_backend_latest.tar.gz

#       - name: Load Docker image
#         run: |
#           gzip -d stock_scraper_backend_latest.tar.gz
#           docker load -i stock_scraper_backend_latest.tar

#       - name: Run tests and coverage
#         run: |
#           docker run --rm stock_scraper_backend:latest bash -c "
#             poetry install &&
#             poetry run coverage run -m pytest &&
#             poetry run coverage report &&
#             poetry run coverage html &&
#             poetry run coverage-badge -o coverage.svg -f
#           "

#       - name: Upload coverage badge
#         uses: actions/upload-artifact@v4
#         with:
#           name: coverage-badge
#           path: coverage.svg

#       - name: Combine coverage & fail if it's <100%
#         run: |
#           docker run --rm stock_scraper_backend:latest bash -c "
#             poetry run coverage combine &&
#             poetry run coverage html --skip-covered --skip-empty &&
#             poetry run coverage report --format=markdown >> $GITHUB_STEP_SUMMARY &&
#             poetry run coverage report --fail-under=100
#           "

#       - name: Upload HTML report if check failed
#         if: failure()
#         uses: actions/upload-artifact@v4
#         with:
#           name: html-report
#           path: htmlcov

#   update-readme:
#     name: Update README
#     runs-on: ubuntu-latest
#     needs: test-and-coverage
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Set up Python
#         uses: actions/setup-python@v5
#         with:
#           python-version: '3.12'

#       - name: Install tree
#         run: sudo apt-get install -y tree

#       - name: Update README.md with directory tree
#         run: ./update_readme_tree.sh

#       - name: Commit changes
#         run: |
#           git config --local user.email "actions@github.com"
#           git config --local user.name "GitHub Actions"
#           git add README.md
#           git commit -m "Update README.md with latest directory tree"
#           git push --force
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#   release:
#     name: Release Workflow
#     runs-on: ubuntu-latest
#     if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Set up Go 1.x
#         uses: actions/setup-go@v2
#         with:
#           go-version: ^1.16

#       - name: Install dependencies
#         run: go mod tidy

#       - name: Install GoReleaser
#         run: |
#           curl -sL https://git.io/goreleaser | bash
#           goreleaser --version

#       - name: Release build
#         run: |
#           GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} goreleaser release

#       - name: Docker login
#         run: echo ${{ secrets.REGISTRY_TOKEN }} | docker login ghcr.io -u ${{ secrets.REGISTRY_USER }} --password-stdin

#       - name: Build Docker image
#         run: |
#           docker build -t ghcr.io/Necraatall/stock_scraper_backend:${{ github.ref }} .  
      
#       - name: Push Docker image
#         run: |
#           docker push ghcr.io/Necraatall/stock_scraper_backend:${{ github.ref }}

#       - name: Scan Docker image for vulnerabilities
#         uses: aquasecurity/trivy-action@master
#         with:
#           image-ref: 'ghcr.io/Necraatall/stock_scraper_backend:${{ github.ref }}'
#           format: 'template'
#           template: '@/contrib/sarif.tpl'
#           output: 'trivy-results.sarif'
#           severity: 'CRITICAL,HIGH'

#       - name: Upload Trivy scan results to GitHub Security tab
#         uses: github/codeql-action/upload-sarif@v2
#         with:
#           sarif_file: 'trivy-results.sarif'




# ########################################################
# ## pytest runs on docker-build-and-push image ##########
# ########################################################
# # reseni chyby:
# # chyba pri load docker image: 
# # Run gzip -d stock_scraper_backend_latest.tar.gz
# #   gzip -d stock_scraper_backend_latest.tar.gz
# #   docker load -i stock_scraper_backend_latest.tar
# #   shell: /usr/bin/bash -e {0}
# # gzip: stock_scraper_backend_latest.tar.gz is a directory -- ignored
# # Error: Process completed with exit code 2.
# ########################################################

# name: CI/CD Pipeline

# on:
#   pull_request:
#     branches:
#       - main
#       - 'feature/**'
#       - 'bug/**'
#       - 'chore/**'
#   workflow_call:
#     secrets:
#       AWS_ACCESS_KEY_TECHNICAL_USER:
#         required: true
#       AWS_SECRET_ACCESS_TECHNICAL_USER:
#         required: true

# jobs:
#   setup:
#     name: AWS Setup
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v2
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_TECHNICAL_USER }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_TECHNICAL_USER }}
#           aws-region: us-east-1

#   docker-build-and-push:
#     name: Docker Build and Push to AWS ECR Public
#     runs-on: ubuntu-latest
#     needs: setup
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Log in to Amazon ECR Public
#         env:
#           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_TECHNICAL_USER }}
#           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_TECHNICAL_USER }}
#         run: |
#           aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws

#       - name: Build, tag, and push Docker image to Amazon ECR Public
#         env:
#           ECR_REPOSITORY: "public.ecr.aws/d8o8x6c7/stock_scraper_backend"
#           IMAGE_TAG: latest
#         run: |
#           docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
#           docker push $ECR_REPOSITORY:$IMAGE_TAG

#   trivy-scan:
#     name: Trivy Scan
#     runs-on: ubuntu-latest
#     needs: docker-build-and-push
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Run Trivy vulnerability scanner
#         uses: aquasecurity/trivy-action@0.20.0
#         with:
#           image-ref: 'public.ecr.aws/d8o8x6c7/stock_scraper_backend:latest'
#           format: 'table'
#           exit-code: '1'
#           ignore-unfixed: true
#           vuln-type: 'os,library'
#           severity: 'CRITICAL,HIGH'

#   ruff-scan:
#     name: Run Ruff
#     runs-on: ubuntu-latest
#     needs: trivy-scan
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Run Ruff
#         uses: chartboost/ruff-action@v1
#         with:
#           args: check ./ --fix

#   test-and-coverage:
#     name: Run Tests and Check Coverage
#     runs-on: ubuntu-latest
#     needs: ruff-scan
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Log in to Amazon ECR Public
#         env:
#           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_TECHNICAL_USER }}
#           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_TECHNICAL_USER }}
#         run: |
#           aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws

#       - name: Pull Docker image
#         run: |
#           docker pull public.ecr.aws/d8o8x6c7/stock_scraper_backend:latest

#       - name: Run tests and check coverage
#         run: |
#           docker run --rm public.ecr.aws/d8o8x6c7/stock_scraper_backend:latest bash -c "poetry run coverage run -m pytest && poetry run coverage report && poetry run coverage html && poetry run coverage-badge -o coverage.svg -f"
      
#       - name: Upload coverage badge
#         uses: actions/upload-artifact@v4
#         with:
#           name: coverage-badge
#           path: coverage.svg

#       - name: Upload HTML coverage report
#         uses: actions/upload-artifact@v4
#         with:
#           name: html-coverage-report
#           path: htmlcov

#   update-readme:
#     runs-on: ubuntu-latest
#     needs: test-and-coverage
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Set up Python
#         uses: actions/setup-python@v5
#         with:
#           python-version: '3.10'

#       - name: Install tree
#         run: sudo apt-get install -y tree

#       - name: Update README.md with directory tree
#         run: ./update_readme_tree.sh

#       - name: Commit changes
#         run: |
#           git config --local user.email "actions@github.com"
#           git config --local user.name "GitHub Actions"
#           git add README.md
#           git commit -m "Update README.md with latest directory tree"
#           git push --force
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#   release:
#     name: Release Workflow
#     runs-on: ubuntu-latest
#     if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Set up Go 1.x
#         uses: actions/setup-go@v2
#         with:
#           go-version: ^1.16

#       - name: Install dependencies
#         run: go mod tidy

#       - name: Install GoReleaser
#         run: |
#           curl -sL https://git.io/goreleaser | bash
#           goreleaser --version

#       - name: Release build
#         run: |
#           GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} goreleaser release

#       - name: Docker login
#         run: echo ${{ secrets.REGISTRY_TOKEN }} | docker login ghcr.io -u ${{ secrets.REGISTRY_USER }} --password-stdin

#       - name: Build Docker image
#         run: |
#           docker build -t ghcr.io/Necraatall/stock_scraper_backend:${{ github.ref }} .  
      
#       - name: Push Docker image
#         run: |
#           docker push ghcr.io/Necraatall/stock_scraper_backend:${{ github.ref }}

#       - name: Scan Docker image for vulnerabilities
#         uses: aquasecurity/trivy-action@master
#         with:
#           image-ref: 'ghcr.io/Necraatall/stock_scraper_backend:${{ github.ref }}'
#           format: 'template'
#           template: '@/contrib/sarif.tpl'
#           output: 'trivy-results.sarif'
#           severity: 'CRITICAL,HIGH'

#       - name: Upload Trivy scan results to GitHub Security tab
#         uses: github/codeql-action/upload-sarif@v2
#         with:
#           sarif_file: 'trivy-results.sarif'


# ########################################################
# ## pytest runs on docker-build-and-push image ##########
# ########################################################
# # reseni chyb testu:
# KeyError: 'time' # time je nazev sloupce
#     Tento problém nastává, protože v některých řádcích tabulky 
#     nemusí být sloupec time. V testu test_get_stock_data 
#     je třeba tuto situaci správně zpracovat.

# OperationalError: could not translate host name "db" to address: Name or service not known

#     Tento problém je způsoben tím, že testovací Docker container 
#     nemá přístup k databázi, protože hostname db 
#     není správně nastavený nebo není dostupný. 
#     Během testování by měla být použita lokální SQLite 
#     databáze, kterou lze snadno nastavit a použít.
# ########################################################

name: CI/CD Pipeline

on:
  pull_request:
    branches:
      - main
      - 'feature/**'
      - 'bug/**'
      - 'chore/**'
  workflow_call:
    secrets:
      AWS_ACCESS_KEY_TECHNICAL_USER:
        required: true
      AWS_SECRET_ACCESS_TECHNICAL_USER:
        required: true

jobs:
  setup:
    name: AWS Setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_TECHNICAL_USER }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_TECHNICAL_USER }}
          aws-region: us-east-1

  docker-build-and-push:
    name: Docker Build and Push to AWS ECR Public
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Amazon ECR Public
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_TECHNICAL_USER }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_TECHNICAL_USER }}
        run: |
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws

      - name: Build, tag, and push Docker image to Amazon ECR Public
        env:
          ECR_REPOSITORY: "public.ecr.aws/d8o8x6c7/stock_scraper_backend"
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REPOSITORY:$IMAGE_TAG

  trivy-scan:
    name: Trivy Scan
    runs-on: ubuntu-latest
    needs: docker-build-and-push
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: 'public.ecr.aws/d8o8x6c7/stock_scraper_backend:latest'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

  ruff-scan:
    name: Run Ruff
    runs-on: ubuntu-latest
    needs: trivy-scan
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Ruff
        uses: chartboost/ruff-action@v1
        with:
          args: check ./ --fix

  test-and-coverage:
    name: Run Tests and Check Coverage
    runs-on: ubuntu-latest
    needs: ruff-scan
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Amazon ECR Public
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_TECHNICAL_USER }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_TECHNICAL_USER }}
        run: |
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws

      - name: Pull Docker image
        run: |
          docker pull public.ecr.aws/d8o8x6c7/stock_scraper_backend:latest

      - name: Run tests and check coverage
        run: |
          docker run --rm public.ecr.aws/d8o8x6c7/stock_scraper_backend:latest bash -c "export DATABASE_URL='sqlite:///./app/test_db/test.db' && poetry run coverage run -m pytest && poetry run coverage report && poetry run coverage html && poetry run coverage-badge -o coverage.svg -f"
      
      - name: Upload coverage badge
        uses: actions/upload-artifact@v4
        with:
          name: coverage-badge
          path: coverage.svg

      - name: Upload HTML coverage report
        uses: actions/upload-artifact@v4
        with:
          name: html-coverage-report
          path: htmlcov

  update-readme:
    runs-on: ubuntu-latest
    needs: test-and-coverage
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install tree
        run: sudo apt-get install -y tree

      - name: Update README.md with directory tree
        run: ./update_readme_tree.sh

      - name: Commit changes
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          git add README.md
          git commit -m "Update README.md with latest directory tree"
          git push --force
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release:
    name: Release Workflow
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.16

      - name: Install dependencies
        run: go mod tidy

      - name: Install GoReleaser
        run: |
          curl -sL https://git.io/goreleaser | bash
          goreleaser --version

      - name: Release build
        run: |
          GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} goreleaser release

      - name: Docker login
        run: echo ${{ secrets.REGISTRY_TOKEN }} | docker login ghcr.io -u ${{ secrets.REGISTRY_USER }} --password-stdin

      - name: Build Docker image
        run: |
          docker build -t ghcr.io/Necraatall/stock_scraper_backend:${{ github.ref }} .  
      
      - name: Push Docker image
        run: |
          docker push ghcr.io/Necraatall/stock_scraper_backend:${{ github.ref }}

      - name: Scan Docker image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ghcr.io/Necraatall/stock_scraper_backend:${{ github.ref }}'
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
