# name: CI Pipeline tests
# # Controls when the workflow will run
# on:
#   pull_request:
#     branches:
#       - main

#   # Allows you to run this workflow manually from the Actions tab
#   workflow_dispatch:

# jobs:
#   # Job for Trivy scan
#   trivy-scan:
#     if: github.event.pull_request.merged == false
#     runs-on: ubuntu-latest

#     steps:
#     - name: Checkout repository
#       uses: actions/checkout@v4

#     - name: Set up Python
#       uses: actions/setup-python@v4
#       with:
#         python-version: '3.10'

#     - name: Scan Docker image with Trivy
#       run: task trivy-scan

#   # Job for running Ruff, depends on trivy-scan job
#   run-ruff:
#     if: github.event.pull_request.merged == false
#     runs-on: ubuntu-latest
#     needs: trivy-scan

#     steps:
#     - name: Checkout repository
#       uses: actions/checkout@v4

#     - name: Set up Python
#       uses: actions/setup-python@v4
#       with:
#         python-version: '3.10'

#     - name: Run Ruff
#       run: task run-ruff

#   # Job for running pytest with coverage, depends on run-ruff job
#   run-pytest-with-coverage:
#     if: github.event.pull_request.merged == false
#     runs-on: ubuntu-latest
#     needs: run-ruff

#     steps:
#     - name: Checkout repository
#       uses: actions/checkout@v4

#     - name: Set up Python
#       uses: actions/setup-python@v4
#       with:
#         python-version: '3.10'

#     - name: Run pytest with coverage
#       run: task run-pytest-with-coverage


# name: CI Pipeline tests

# # Controls when the workflow will run
# on:
#   pull_request:
#     branches:
#       - main

#   # Allows you to run this workflow manually from the Actions tab
#   workflow_dispatch:

# jobs:
  # task-prerequisites:
  #   runs-on: ubuntu-latest

  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v4

  #   - name: Get user
  #     run: whoami > user.txt

  #   - name: Install task
  #     run: |
  #       curl -sL https://taskfile.dev/install.sh | sh
  #       echo "/usr/local/bin" >> $GITHUB_PATH

  #   - name: Download Taskfile auto-completion script
  #     run: curl -LO https://raw.githubusercontent.com/go-task/task/main/completion/bash/task.bash

  #   - name: Add user to sudoers
  #     run: |
  #       USER=$(cat user.txt)
  #       echo "$USER ALL=(ALL:ALL) NOPASSWD: /usr/bin/mv" | sudo tee /etc/sudoers.d/$USER

  #   - name: Move auto-completion script
  #     run: sudo mv task.bash /usr/share/bash-completion/completions/

  #   - name: Add auto-completion script to .bashrc
  #     run: echo 'source /usr/share/bash-completion/completions/task' >> ~/.bashrc

  #   - name: Verify task installation
  #     run: task --version

#   # Job for Trivy scan
#   trivy-scan:
#     if: github.event.pull_request.merged == false
#     runs-on: ubuntu-latest
#     needs: task-prerequisites

#     steps:
#     - name: Checkout repository
#       uses: actions/checkout@v4

#     - name: Set Docker image name
#       run: echo "IMAGE_NAME=${{ secrets.DOCKER_IMAGE_NAME }}" >> $GITHUB_ENV
#       env:
#         DOCKER_IMAGE_NAME: ${{ secrets.DOCKER_IMAGE_NAME }}

#     - name: Run Trivy scan
#       run: task trivy-scan

#   # Job for running Ruff, depends on trivy-scan job
#   run-ruff:
#     if: github.event.pull_request.merged == false
#     runs-on: ubuntu-latest
#     needs: trivy-scan

#     steps:
#     - name: Checkout repository
#       uses: actions/checkout@v4

#     - name: Set Docker image name
#       run: echo "IMAGE_NAME=${{ secrets.DOCKER_IMAGE_NAME }}" >> $GITHUB_ENV
#       env:
#         DOCKER_IMAGE_NAME: ${{ secrets.DOCKER_IMAGE_NAME }}

#     - name: Run Ruff
#       run: task run-ruff

#   # Job for running pytest with coverage, depends on run-ruff job
#   run-pytest-with-coverage:
#     if: github.event.pull_request.merged == false
#     runs-on: ubuntu-latest
#     needs: run-ruff

#     steps:
#     - name: Checkout repository
#       uses: actions/checkout@v4

#     - name: Set Docker image name
#       run: echo "IMAGE_NAME=${{ secrets.DOCKER_IMAGE_NAME }}" >> $GITHUB_ENV
#       env:
#         DOCKER_IMAGE_NAME: ${{ secrets.DOCKER_IMAGE_NAME }}

#     - name: Run pytest with coverage
#       run: task run-pytest-with-coverage

# name: CI Pipeline tests and Docker Build

# on:
#   pull_request:
#     branches:
#       - main

# jobs:
#   task-prerequisites:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Get user
#         run: whoami > user.txt

#       - name: Install task
#         run: |
#           curl -sL https://taskfile.dev/install.sh | sh
#           echo "/usr/local/bin" >> $GITHUB_PATH

#       - name: Download Taskfile auto-completion script
#         run: curl -LO https://raw.githubusercontent.com/go-task/task/main/completion/bash/task.bash

#       - name: Add user to sudoers
#         run: |
#           USER=$(cat user.txt)
#           echo "$USER ALL=(ALL:ALL) NOPASSWD: /usr/bin/mv" | sudo tee /etc/sudoers.d/$USER

#       - name: Move auto-completion script
#         run: sudo mv task.bash /usr/share/bash-completion/completions/

#       - name: Add auto-completion script to .bashrc
#         run: echo 'source /usr/share/bash-completion/completions/task' >> ~/.bashrc

#       - name: Verify task installation
#         run: task --version

  # # Job for Trivy scan
  # trivy-scan:
  #   if: github.event.pull_request.merged == false && github.job == 'trivy-scan'
  #   runs-on: ubuntu-latest
  #   needs: task-prerequisites
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Scan Docker image with Trivy
  #       run: trivy image --severity HIGH,CRITICAL --ignore-unfixed ${{ secrets.DOCKER_IMAGE_NAME }}

#   # Job for running Ruff
#   run-ruff:
#     if: github.event.pull_request.merged == false && github.job == 'run-ruff'
#     runs-on: ubuntu-latest
#     needs: task-prerequisites
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Run Ruff
#         run: ruff check ./src

#   # Job for running pytest with coverage
#   run-pytest-with-coverage:
#     if: github.event.pull_request.merged == false && github.job == 'run-pytest-with-coverage'
#     runs-on: ubuntu-latest
#     needs: task-prerequisites
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Run pytest with coverage
#         run: task run-pytest-with-coverage

#   docker-build-and-push:
#     runs-on: ubuntu-latest
#     needs: task-prerequisites
#     if: github.event.pull_request.merged == false
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v2
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_TECHNICAL_USER }}
#           aws-secret-access-key: ${{ secrets.ACCESS_KEY_TECHNICAL_USER }}
#           aws-region: us-east-1

#       - name: Log in to Amazon ECR Public
#         run: |
#           aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws

#       - name: Build, tag, and push Docker image to Amazon ECR Public
#         env:
#           ECR_REPOSITORY: "public.ecr.aws/d8o8x6c7/lection2"
#           IMAGE_TAG: latest
#         run: |
#           # Build Docker image
#           docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
#           # Push the image to ECR Public
#           docker push $ECR_REPOSITORY:$IMAGE_TAG

name: CI Pipeline tests and Docker Build

on:
  pull_request:
    branches:
      - main

jobs:
  task-prerequisites:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get user
        run: whoami > user.txt
      
      - name: Install task
        run: |
          curl -sL https://taskfile.dev/install.sh | sh
          export PATH="$PATH:/usr/local/bin"
          curl -LO https://raw.githubusercontent.com/go-task/task/main/completion/bash/task.bash
          USER=$(cat user.txt)
          echo "${USER} ALL=(ALL:ALL) NOPASSWD: /usr/bin/mv" | sudo EDITOR='tee -a' visudo -f /etc/sudoers.d/${USER}
          sudo mv task.bash /usr/share/bash-completion/completions/
          echo 'source /usr/share/bash-completion/completions/task' >> ~/.bashrc
  
      - name: Download Taskfile auto-completion script
        run: curl -LO https://raw.githubusercontent.com/go-task/task/main/completion/bash/task.bash

      - name: Add user to sudoers
        run: |
          USER=$(cat user.txt)
          echo "$USER ALL=(ALL:ALL) NOPASSWD: /usr/bin/mv" | sudo tee /etc/sudoers.d/$USER

      - name: Move auto-completion script
        run: sudo mv task.bash /usr/share/bash-completion/completions/

      - name: Add auto-completion script to .bashrc
        run: echo 'source /usr/share/bash-completion/completions/task' >> ~/.bashrc

      - name: Verify task installation
        run: task --version

  # Job for Trivy scan
  trivy-scan:
    if: github.event.pull_request.merged == false && github.job == 'trivy-scan'
    runs-on: ubuntu-latest
    needs: task-prerequisites
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get Docker image name
        id: get_image_name
        run: |
          echo "::set-output name=image_name::${{ secrets.DOCKER_IMAGE_NAME }}"

      - name: Scan Docker image with Trivy
        run: trivy image --severity HIGH,CRITICAL --ignore-unfixed ${{ steps.get_image_name.outputs.image_name }}

  # Job for running Ruff
  run-ruff:
    if: github.event.pull_request.merged == false && github.job == 'run-ruff'
    runs-on: ubuntu-latest
    needs: trivy-scan
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Ruff
        run: ruff check ./src

  # Job for running pytest with coverage
  run-pytest-with-coverage:
    if: github.event.pull_request.merged == false && github.job == 'run-pytest-with-coverage'
    runs-on: ubuntu-latest
    needs: run-ruff
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run pytest with coverage
        run: task run-pytest-with-coverage

  docker-build-and-push:
    runs-on: ubuntu-latest
    needs: run-pytest-with-coverage
    if: github.event.pull_request.merged == false
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_TECHNICAL_USER }}
          aws-secret-access-key: ${{ secrets.ACCESS_KEY_TECHNICAL_USER }}
          aws-region: us-east-1

      - name: Log in to Amazon ECR Public
        run: |
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws

      - name: Build, tag, and push Docker image to Amazon ECR Public
        env:
          ECR_REPOSITORY: "public.ecr.aws/d8o8x6c7/lection2"
          IMAGE_TAG: latest
        run: |
          # Build Docker image
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          # Push the image to ECR Public
          docker push $ECR_REPOSITORY:$IMAGE_TAG
