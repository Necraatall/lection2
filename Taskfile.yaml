# yaml-language-server: $schema=https://taskfile.dev/schema.json
# https://taskfile.dev
version: "3.8"

env:
  USER_FILE: ".current_user"

tasks:
  load-env:
    cmds:
      - source .env

  get-user:
    cmds:
      - whoami > {{.USER_FILE}}

  setup:
    summary: Sets up Taskfile auto-completion
    deps:
      - get-user
    desc: |
      This task performs the following steps to set up auto-completion for Taskfile:
      1. Downloads the bash auto-completion script for Taskfile.
      2. Adds the current user to the sudoers file to allow moving the script without a password.
      3. Moves the downloaded script to the bash-completion directory.
      4. Adds a line to the .bashrc file to source the auto-completion script on shell startup.
    cmds:
      - curl -sL https://taskfile.dev/install.sh | sh
      - export PATH="$PATH:./bin"
      - curl -LO https://raw.githubusercontent.com/go-task/task/main/completion/bash/task.bash
      - echo 'USER=$(cat {{.USER_FILE}}) && $USER ALL=(ALL:ALL) NOPASSWD:'' /usr/bin/mv' | echo 'sudo tee /etc/sudoers.d/$USER'
      - mv task.bash /usr/share/bash-completion/completions/
      - echo 'source /usr/share/bash-completion/completions/task' >> ~/.bashrc

  install-poetry:
    summary: Installs Poetry package manager
    deps:
      - setup
    desc: |
      This task performs the following steps to install Poetry package manager:
      1. Downloads the installation script for Poetry.
      2. Executes the installation script.
    env:
      POETRY_VERSION: "1.1.12"
      PATH: "/app/.venv/bin:${PATH}"
      PYTHONPATH: ".:src:./.venv/lib/python3.10/site-packages:$PYTHONPATH"
    cmds:
      - pip install -r requirements.txt
      - pip install poetry==${POETRY_VERSION}
      - pip install -U pip
      - pip install poetry
      - pip install --upgrade poetry

  install-dependencies:
    summary: Installs project dependencies
    deps:
      - install-poetry
    cmds:
      - poetry lock
      - poetry install --with dev
      - poetry update

  install-trivy:
    summary: Installs Trivy vulnerability scanner
    desc: |
      This task performs the following steps to install Trivy vulnerability scanner:
      1. Installs necessary packages (wget, apt-transport-https, gnupg).
      2. Downloads and stores the public key for the Trivy repository.
      3. Adds the Trivy repository to the APT sources list.
      4. Updates the list of available packages.
      5. Installs Trivy.
    cmds:
      - apt-get update -y
      - apt-get install -y wget apt-transport-https gnupg
      - wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor | sudo tee /usr/share/keyrings/trivy.gpg > /dev/null
      - sh -c 'echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb generic main" > /etc/apt/sources.list.d/trivy.list'
      - apt-get update -y
      - curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
      - echo 'export PATH=$PATH:/root/.local/bin' >> $GITHUB_ENV
      - trivy --version

  build-image:
    summary: Builds a Docker image
    deps:
      - load-env
    desc: |
      This task performs the following steps to build a Docker image:
      1. Builds a Docker image using the Dockerfile in the root directory.
    cmds:
      - docker build --no-cache -t ${DOCKER_IMAGE_NAME} .

  trivy-scan:
    summary: Scans a Docker image using Trivy
    deps:
      - load-env
    desc: |
      This task performs the following steps to scan a Docker image using Trivy:
      1. Runs Trivy against the specified Docker image.
    cmds:
      - trivy image --severity HIGH,CRITICAL --ignore-unfixed ${DOCKER_IMAGE_NAME}

  ruff:
    summary: Runs Ruff linter
    desc: |
      This task performs the following steps to run Ruff linter:
      1. Installs Ruff if not already installed.
      2. Runs Ruff against the codebase.
    cmds:
      - ruff check ./src

  run-pytest:
    summary: Runs pytest
    desc: |
      This task performs the following steps to run pytest:
      1. Runs pytest against the tests.
    cmds:
      - pytest --cov=lection2 tests/

# this is setup for newones on python
  install-docker:
    summary: Installs Docker and Docker Compose
    desc: |
      This task performs the following steps to install Docker and Docker Compose:
      1. Updates the package list.
      2. Installs Docker and Docker Compose.
    cmds:
      - sudo apt update
      - sudo apt install -y docker.io docker-compose

  start-docker:
    summary: Starts Docker containers
    desc: |
      This task performs the following steps to start Docker containers:
      1. Uses Docker Compose to start the containers defined in docker-compose.yml.
    cmds:
      - docker-compose up -d

  initialize-database:
    summary: Initializes the database using Alembic
    desc: |
      This task performs the following steps to initialize the database:
      1. Applies the latest database migrations using Alembic.
    cmds:
      - alembic upgrade head

  setup-install:
    desc: "Setup the project"
    deps:
      - install-docker
      - install-poetry
      - install-dependencies
      - start-docker

# alternative step for setup-install for newbies
  initialize-database:
    summary: Initializes the database using Alembic
    desc: |
      This task performs the following steps to initialize the database:
      1. Applies the latest database migrations using Alembic.
    cmds:
      - alembic upgrade head
